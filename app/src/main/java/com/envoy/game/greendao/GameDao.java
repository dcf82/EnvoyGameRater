package com.envoy.game.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.envoy.game.greendao.Game;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME".
*/
public class GameDao extends AbstractDao<Game, Long> {

    public static final String TABLENAME = "GAME";

    /**
     * Properties of entity Game.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MGameName = new Property(1, String.class, "mGameName", false, "M_GAME_NAME");
        public final static Property MConsoleName = new Property(2, String.class, "mConsoleName", false, "M_CONSOLE_NAME");
        public final static Property MGameImage = new Property(3, byte[].class, "mGameImage", false, "M_GAME_IMAGE");
        public final static Property MGameFinished = new Property(4, Boolean.class, "mGameFinished", false, "M_GAME_FINISHED");
        public final static Property MStarsNumber = new Property(5, Integer.class, "mStarsNumber", false, "M_STARS_NUMBER");
    };

    private DaoSession daoSession;


    public GameDao(DaoConfig config) {
        super(config);
    }
    
    public GameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"M_GAME_NAME\" TEXT," + // 1: mGameName
                "\"M_CONSOLE_NAME\" TEXT," + // 2: mConsoleName
                "\"M_GAME_IMAGE\" BLOB," + // 3: mGameImage
                "\"M_GAME_FINISHED\" INTEGER," + // 4: mGameFinished
                "\"M_STARS_NUMBER\" INTEGER);"); // 5: mStarsNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Game entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mGameName = entity.getMGameName();
        if (mGameName != null) {
            stmt.bindString(2, mGameName);
        }
 
        String mConsoleName = entity.getMConsoleName();
        if (mConsoleName != null) {
            stmt.bindString(3, mConsoleName);
        }
 
        byte[] mGameImage = entity.getMGameImage();
        if (mGameImage != null) {
            stmt.bindBlob(4, mGameImage);
        }
 
        Boolean mGameFinished = entity.getMGameFinished();
        if (mGameFinished != null) {
            stmt.bindLong(5, mGameFinished ? 1L: 0L);
        }
 
        Integer mStarsNumber = entity.getMStarsNumber();
        if (mStarsNumber != null) {
            stmt.bindLong(6, mStarsNumber);
        }
    }

    @Override
    protected void attachEntity(Game entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Game readEntity(Cursor cursor, int offset) {
        Game entity = new Game( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mGameName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mConsoleName
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // mGameImage
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // mGameFinished
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // mStarsNumber
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Game entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMGameName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMConsoleName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMGameImage(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setMGameFinished(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setMStarsNumber(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Game entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Game entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
